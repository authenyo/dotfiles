# Author: https://github.com/x0rzavi
# Description: User agnostic conveniences for ZSH
# Requisites: zsh, zoxide, starship, zsh-syntax-highlighting, zsh-autosuggestions
# Workflow: ~/.zshrc -> ~/.bin/x0rzavi.zsh + ~/.zprofile

# List of modern UNIX tool replacements
# bat (https://github.com/sharkdp/bat)                  [cat] [sys-apps/bat]
# bat-extras (https://github.com/eth-p/bat-extras)      [grep/man/less/watch/diff] [sys-apps/bat-extras]
# exa (https://github.com/ogham/exa)                    [ls] [sys-apps/exa]
# dust (https://github.com/bootandy/dust)               [du] [sys-apps/dust]
# duf (https://github.com/muesli/duf)                   [df] [sys-fs/duf]
# bottom (https://github.com/ClementTsang/bottom)       [top] [sys-process/bottom]
# btop (https://github.com/aristocratos/btop)           [top] [sys-process/btop]
# gdu (https://github.com/dundee/gdu)                   [ncdu] [sys-fs/gdu]
# ripgrep (https://github.com/BurntSushi/ripgrep)       [grep] [sys-apps/ripgrep]
# ripgrep-all (https://github.com/phiresky/ripgrep-all) [grep] [sys-apps/ripgrep-all]
# git-delta (https://github.com/dandavison/delta)       [diff] [dev-util/git-delta]
# sd (https://github.com/chmln/sd)                      [sed] [sys-apps/sd]
# fd (https://github.com/sharkdp/fd)                    [find] [sys-apps/fd]
# zoxide (https://github.com/ajeetdsouza/zoxide)        [cd] [app-shells/zoxide]
# plocate (https://plocate.sesse.net)                   [locate] [sys-apps/plocate]
# procs (https://github.com/dalance/procs)              [ps] [sys-apps/procs]
# gping (https://github.com/orf/gping)                  [ping] [net-analyzer/gping-bin]
# doggo (https://github.com/mr-karan/doggo)             [dig] [net-dns/doggo-bin]
# fzf (https://github.com/junegunn/fzf)                 [misc] [app-shells/fzf]
# entr (https://github.com/eradman/entr)                [misc] [app-admin/entr]
# moreutils (https://joeyh.name/code/moreutils)         [misc] [sys-apps/moreutils]
# cheat (https://github.com/cheat/cheat)                [misc] [app-misc/cheat]
# tealdeer (https://github.com/dbrgn/tealdeer)          [misc] [app-misc/tealdeer]

# Variables
x0rzavi_home='{{ .chezmoi.homeDir }}'

# zinit plugin manager
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

# Define command replacements
cat() { bat "$@" 2> /dev/null || [ $? -eq 0 ] || command cat "$@"; }
grep() { batgrep --ignore-case --hidden "$@" 2> /dev/null || [ $? -eq 0 ] || command grep --ignore-case "$@"; }
man() { batman "$@" 2> /dev/null || [ $? -eq 0 ] || command man "$@"; }
watch() { batwatch --interval 1 --command "$@" 2> /dev/null || [ $? -eq 0 ] || command watch --interval 1 "$@"; }
diff() { batdiff --delta "$@" 2> /dev/null || [ $? -eq 0 ] || command diff "$@"; }
ls() { exa --icons "$@" 2> /dev/null || [ $? -eq 0 ] || command ls "$@"; }
ll() { exa --icons --long --all --group --git --group-directories-first "$@" 2> /dev/null || [ $? -eq 0 ] || command ls --almost-all --human-readable -l "$@"; }
du() { dust "$@" 2> /dev/null || [ $? -eq 0 ] || command du --human-readable --summarize "$@"; }
df() { duf "$@" 2> /dev/null || [ $? -eq 0 ] || command df --human-readable "$@"; }
ncdu() { gdu --show-relative-size --max-cores 4 "$@" 2> /dev/null || [ $? -eq 0 ] || command ncdu "$@"; }
find() { fd --hidden --no-ignore --follow "$@" 2> /dev/null || [ $? -eq 0 ] || command find "$@"; }
sed() { sd "$@" 2> /dev/null || [ $? -eq 0 ] || command sed "$@"; }
ps() { procs "$@" 2> /dev/null || [ $? -eq 0 ] || command ps axu "$@"; }
dig() { doggo "$@" 2> /dev/null || [ $? -eq 0 ] || command dig "$@"; }
ping() { gping "$@" 2> /dev/null || [ $? -eq 0 ] || command ping "$@"; }

# Hacks / improvements
# alias nvim='nvim 2> /dev/null'
cpr() { rsync --archive -hh --partial --info=stats1,progress2 --modify-window=1 "$@" 2> /dev/null || [ $? -eq 0 ] || command echo "Please install rsync!"; }
mvr() { rsync --archive -hh --partial --info=stats1,progress2 --modify-window=1 --remove-source-files "$@" 2> /dev/null || [ $? -eq 0 ] || command echo "Please install rsync!"; }

{{ if eq .chezmoi.os "linux" -}}
# Define general task aliases
{{- if eq .chezmoi.osRelease.id "gentoo" }}
alias update='sudo emaint -A sync'
alias upgrade='sudo emerge --update --changed-use --deep --with-bdeps=y @world'
alias cleanup='sudo emerge --depclean ; sudo eclean-dist --deep'
{{- else if eq .chezmoi.osRelease.id "arch" }}
alias update='paru'
alias upgrade='paru -Syyu'
alias cleanup='paru -Sccd && (paru -Qtdq | paru -Rns -)'
{{- end }}
alias perf="sudo ${x0rzavi_home}/.bin/mode.sh -p"
{{- end }}

# Set ZSH options: http://zsh.sourceforge.net/Doc/Release/Options.html.
setopt HIST_IGNORE_SPACE        # prevent entries from being recorded into a history by preceding them with space
setopt HIST_IGNORE_ALL_DUPS     # prevent history from recording duplicated entries even if they are not adjacent
# setopt HIST_IGNORE_DUPS
# setopt HIST_SAVE_NO_DUPS
# setopt HIST_FIND_NO_DUPS
setopt HIST_ALLOW_CLOBBER       # save clobber overrides as is
setopt HIST_REDUCE_BLANKS       # tidy up the line when it is entered into the history by removing any excess blanks
setopt HIST_NO_STORE            # don't store history or fc commands
setopt HIST_EXPIRE_DUPS_FIRST   # remove duplicates before unique entries when trimmed
setopt SHARE_HISTORY            # share command history data
setopt INC_APPEND_HISTORY       # append history immediately without waiting for shell to exit
setopt NO_CLOBBER               # don't allow overwriting files generally ( use >| to override )
setopt AUTO_CD                  # check to see if it's actually a directory. If it is, change to that directory
# setopt MENU_COMPLETE          # one completion is always inserted completely, then when you hit TAB it changes to the next,
# setopt CORRECT                # enable autocorrection

# ZSH history options
HISTFILE="${HOME}/.zsh_history"
HISTSIZE=10000
SAVEHIST="${HISTSIZE}"

# zsh-vi-mode
ZVM_VI_EDITOR=nvim
ZVM_VI_INSERT_ESCAPE_BINDKEY=jk
zinit ice depth=1
zinit light jeffreytse/zsh-vi-mode
function zvm_after_lazy_keybindings() {
  zvm_bindkey viins '^p' history-search-backward
  zvm_bindkey viins '^n' history-search-forward
  zvm_bindkey vicmd '^p' history-search-backward
  zvm_bindkey vicmd '^n' history-search-forward
  zvm_bindkey viins '^[[A' history-search-backward
  zvm_bindkey viins '^[[B' history-search-forward
  zvm_bindkey vicmd '^[[A' history-search-backward
  zvm_bindkey vicmd '^[[B' history-search-forward
}


# Keybindings: https://wiki.archlinux.org/title/zsh#Key_bindings
# create a zkbd compatible hash, to add other keys to this hash, see: man 5 terminfo
# source ${x0rzavi_home}/.zkbd/keymaps
# typeset -g -A key

# key[Home]="${terminfo[khome]}"
# key[End]="${terminfo[kend]}"
# key[Insert]="${terminfo[kich1]}"
# key[Backspace]="${terminfo[kbs]}"
# key[Delete]="${terminfo[kdch1]}"
# key[Up]="${terminfo[kcuu1]}"
# key[Down]="${terminfo[kcud1]}"
# key[Left]="${terminfo[kcub1]}"
# key[Right]="${terminfo[kcuf1]}"
# key[PageUp]="${terminfo[kpp]}"
# key[PageDown]="${terminfo[knp]}"
# key[Shift-Tab]="${terminfo[kcbt]}"

# [[ -n "${key[Home]}"        ]] && bindkey -- "${key[Home]}"         beginning-of-line
# [[ -n "${key[End]}"         ]] && bindkey -- "${key[End]}"          end-of-line
# [[ -n "${key[Insert]}"      ]] && bindkey -- "${key[Insert]}"       overwrite-mode
# [[ -n "${key[Backspace]}"   ]] && bindkey -- "${key[Backspace]}"    backward-delete-char
# [[ -n "${key[Delete]}"      ]] && bindkey -- "${key[Delete]}"       delete-char
# [[ -n "${key[Left]}"        ]] && bindkey -- "${key[Left]}"         backward-char
# [[ -n "${key[Right]}"       ]] && bindkey -- "${key[Right]}"        forward-char
# [[ -n "${key[PageUp]}"      ]] && bindkey -- "${key[PageUp]}"       beginning-of-buffer-or-history
# [[ -n "${key[PageDown]}"    ]] && bindkey -- "${key[PageDown]}"     end-of-buffer-or-history
# [[ -n "${key[Shift-Tab]}"   ]] && bindkey -- "${key[Shift-Tab]}"    reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
# if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
#     autoload -Uz add-zle-hook-widget
#     function zle_application_mode_start { echoti smkx }
#     function zle_application_mode_stop { echoti rmkx }
#     add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
#     add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
# fi

# History based autocompletion
# autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
# zle -N up-line-or-beginning-search
# zle -N down-line-or-beginning-search
# [[ -n "${key[Up]}"          ]] && bindkey -- "${key[Up]}"           up-line-or-beginning-search
# [[ -n "${key[Down]}"        ]] && bindkey -- "${key[Down]}"         down-line-or-beginning-search

# Autocompletion options
autoload -Uz compinit
compinit
zstyle ':completion::complete:*' use-cache on
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # case insensitive matching
zstyle ':completion:*' rehash true
# zstyle ':completion:*' menu select=3

# Initialize zoxide
eval "$(zoxide init --cmd cd zsh)"

# Source additional helper files
{{- if eq .chezmoi.osRelease.id "gentoo" }}
source /usr/share/zsh/site-functions/zsh-syntax-highlighting.zsh
source /usr/share/zsh/site-functions/zsh-autosuggestions.zsh
{{- else if eq .chezmoi.osRelease.id "arch" }}
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
{{ end }}

{{- if eq .chezmoi.os "linux" }}
{{- if (or (.chezmoi.hostname | lower | contains "vm") (.chezmoi.kernel.osrelease | lower | contains "microsoft")) }}
# Initialize keychains on WSL / Linux VM
if [ "$(id -u)" -ne 0 ] 
then
    # Hack to openup ssh keys without intervention
    eval $(DISPLAY=:0 SSH_ASKPASS=${x0rzavi_home}/.ssh/.sshkey keychain --eval --quiet id_ed25519)
    
    # Hack to openup gpg keys without intervention
    # GPG pinentry quirk (use only if willing to apply hacky methods)
    export GPG_TTY=$(tty)
    printf 'hack' | gpg --clearsign --pinentry-mode loopback --passphrase-file=${x0rzavi_home}/.gnupg/.gpgkey > /dev/null
fi
{{- end }}
{{- end }}

# Initialize starship
eval "$(starship init zsh)"
